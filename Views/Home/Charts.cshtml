
@{
    ViewBag.Title = "Charts";
}

<h2>Charts</h2>


<h3>Frequency of letters in posts</h3>
<meta charset="utf-8">
<style>
    .axis {
        font: 10px sans-serif;
    }

    .axis-title {
        text-anchor: end;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .axis--x path {
        display: none;
    }

    .axis--y .tick:not(.tick--one) line {
        stroke-opacity: .15;
    }

    .line {
        fill: none;
        stroke: #000;
        stroke-width: 1.5px;
        stroke-linejoin: round;
        stroke-linecap: round;
    }

    .area {
        fill-opacity: 0.6;
    }

    .area--below {
        fill: #de77ae;
    }

    .area--above {
        fill: #7fbc41;
    }
</style>
<body>
    <script src="//d3js.org/d3.v3.min.js"></script>
    <script>

var margin = {top: 30, right: 30, bottom: 30, left: 180},
    width = 960 - margin.left - margin.right,
    height = 300 - margin.top - margin.bottom;

var formatPercent = d3.format("+.0%"),
    formatChange = function(x) { return formatPercent(x - 1); },
    parseDate = d3.time.format("%d-%b-%y").parse;

var x = d3.time.scale()
    .range([0, width]);

var y = d3.scale.log()
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickSize(-width, 0)
    .tickFormat(formatChange);

var line = d3.svg.line()
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.ratio); });

var area = d3.svg.area()
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.ratio); });

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var gX = svg.append("g")
    .attr("class", "axis axis--x")
    .attr("transform", "translate(0," + height + ")");

var gY = svg.append("g")
    .attr("class", "axis axis--y");

gY.append("text")
    .attr("class", "axis-title")
    .attr("transform", "rotate(-90)")
    .attr("y", 6)
    .attr("dy", ".71em")
    .text("Change in Posts-Publish");

d3.tsv("/assets/data.tsv", function(error, data) {
  if (error) throw error;

  // Compute price relative to base value (hypothetical purchase price).
  var baseValue = +data[0].close;
  data.forEach(function(d) {
    d.date = parseDate(d.date);
    d.ratio = d.close / baseValue;
  });

  x.domain(d3.extent(data, function(d) { return d.date; }));
  y.domain(d3.extent(data, function(d) { return d.ratio; }));

  area.y0(y(1));

  // Use a second linear scale for ticks.
  yAxis.tickValues(d3.scale.linear()
      .domain(y.domain())
      .ticks(20));

  gX.call(xAxis);

  gY.call(yAxis)
    .selectAll(".tick")
      .classed("tick--one", function(d) { return Math.abs(d - 1) < 1e-6; });

  var defs = svg.append("defs");

  defs.append("clipPath")
      .attr("id", "clip-above")
    .append("rect")
      .attr("width", width)
      .attr("height", y(1));

  defs.append("clipPath")
      .attr("id", "clip-below")
    .append("rect")
      .attr("y", y(1))
      .attr("width", width)
      .attr("height", height - y(1));

  svg.append("path")
      .datum(data)
      .attr("clip-path", "url(#clip-above)")
      .attr("class", "area area--above")
      .attr("d", area);

  svg.append("path")
      .datum(data)
      .attr("clip-path", "url(#clip-below)")
      .attr("class", "area area--below")
      .attr("d", area);

  svg.append("path")
      .datum(data)
      .attr("class", "line")
      .attr("d", line);
});

    </script>

    
    
    
    
    
    <canvas width="960" height="500"></canvas>
    <script src="//d3js.org/d3.v4.0.0-alpha.4.min.js"></script>
    <script>

var canvas = document.querySelector("canvas"),
    context = canvas.getContext("2d");

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = canvas.width - margin.left - margin.right,
    height = canvas.height - margin.top - margin.bottom;

var x = d3.scaleBand()
    .rangeRound([0, width])
    .padding(0.1);

var y = d3.scaleLinear()
    .rangeRound([height, 0]);

context.translate(margin.left, margin.top);

d3.requestTsv("/assets/data2.tsv", function(d) {
  d.frequency = +d.frequency;
  return d;
}, function(error, data) {
  if (error) throw error;

  x.domain(data.map(function(d) { return d.letter; }));
  y.domain([0, d3.max(data, function(d) { return d.frequency; })]);

  var yTickCount = 10,
      yTicks = y.ticks(yTickCount),
      yTickFormat = y.tickFormat(yTickCount, "%");

  context.beginPath();
  x.domain().forEach(function(d) {
    context.moveTo(x(d) + x.bandwidth() / 2, height);
    context.lineTo(x(d) + x.bandwidth() / 2, height + 6);
  });
  context.strokeStyle = "black";
  context.stroke();

  context.textAlign = "center";
  context.textBaseline = "top";
  x.domain().forEach(function(d) {
    context.fillText(d, x(d) + x.bandwidth() / 2, height + 6);
  });

  context.beginPath();
  yTicks.forEach(function(d) {
    context.moveTo(0, y(d) + 0.5);
    context.lineTo(-6, y(d) + 0.5);
  });
  context.strokeStyle = "black";
  context.stroke();

  context.textAlign = "right";
  context.textBaseline = "middle";
  yTicks.forEach(function(d) {
    context.fillText(yTickFormat(d), -9, y(d));
  });

  context.beginPath();
  context.moveTo(-6.5, 0 + 0.5);
  context.lineTo(0.5, 0 + 0.5);
  context.lineTo(0.5, height + 0.5);
  context.lineTo(-6.5, height + 0.5);
  context.strokeStyle = "black";
  context.stroke();

  context.save();
  context.rotate(-Math.PI / 2);
  context.textAlign = "right";
  context.textBaseline = "top";
  context.font = "bold 10px sans-serif";
  context.fillText("Frequency", -10, 10);
  context.restore();

  context.fillStyle = "steelblue";
  data.forEach(function(d) {
    context.fillRect(x(d.letter), y(d.frequency), x.bandwidth(), height - y(d.frequency));
  });
});

    </script>
    
<h3>Frequency of posts-publish by date</h3>

